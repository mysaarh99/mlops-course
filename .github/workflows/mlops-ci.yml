name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-train-deploy:
    runs-on: ubuntu-latest

    # ⬇ متغيرات البيئة المتاحة لخطوات التدريب (DVC) والنشر
    env:
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      WANDB_PROJECT: mlops-monitoring
      # WANDB_ENTITY: your-entity-if-used   # اتركه غير معرّف إن لم تستخدم Teams

    steps:
      # 1) سحب الكود
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

        

      # 2) إعداد Python
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3) Cache pip
      - name: 📦 Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4) تثبيت المتطلبات
      - name: 📚 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc-ssh

      - name: 🔑 Start ssh-agent and add key
        if: github.event_name == 'push'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.DVC_SSH_KEY }}
            ${{ secrets.SERVER_SSH_KEY }}

      - name: Add server to known_hosts
        if: github.event_name == 'push'
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          # لو منفذ غير 22:
          # ssh-keyscan -p ${{ secrets.SERVER_SSH_PORT }} -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: 🧪 Test SSH (verbose)
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}   # root أو dvc (يجب أن يطابق صاحب المفتاح العام على السيرفر)
          SERVER_HOST: ${{ secrets.SERVER_HOST }}   # 188.227.87.3
          SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}   # اختياري، 22 افتراضيًا
        run: |
          ssh -o StrictHostKeyChecking=yes -vvv ${SERVER_USER}@${SERVER_HOST} ${SERVER_SSH_PORT:+-p ${SERVER_SSH_PORT}} "echo ok"

      - name: DVC push (example)
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
        run: |
          # اجعل DVC يستخدم نفس المضيف والمفتاح عبر URL SSH
          dvc remote modify origin url ssh://${SERVER_USER}@${SERVER_HOST}${SERVER_SSH_PORT:+:${SERVER_SSH_PORT}}/dvc-storage/files
          dvc push -v

      # 8) تنظيف أي keyfile محفوظ داخل dvc config (لتفادي مسارات ويندوز) — عند الدفع فقط
      - name: 🧼 Unset DVC keyfile if present
        if: github.event_name == 'push'
        run: dvc config --unset "remote.origin.keyfile" || true

      # (تم حذف خطوة wandb login؛ نعتمد على env: WANDB_API_KEY)
      # 9) ← محذوفة

      # 10) سحب البيانات من DVC — عند الدفع فقط
      - name: 📥 DVC pull data
        if: github.event_name == 'push'
        run: dvc pull

      # 11) إعادة إنتاج البايبلاين — عند الدفع فقط
      - name: ⚙️ Reproduce pipeline with DVC
        if: github.event_name == 'push'
        run: dvc repro

      # 12) دفع بيانات/نماذج DVC إلى الريموت — عند الدفع فقط
      - name: 📤 DVC push data
        if: github.event_name == 'push'
        run: dvc push

      # 13) تسجيل الدخول إلى Docker Hub — عند الدفع فقط
      - name: 🔑 Log in to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 14) إعداد Buildx
      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 15) إنشاء tag زمني
      - name: 🏷️ Generate Docker image tag
        id: tagger
        run: echo "tag=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      # 16) بناء ورفع الصورة — عند الدفع فقط
      - name: 🐳 Build and Push Docker Image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/mlops-api:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/mlops-api:${{ steps.tagger.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 17) التحقق من وجود مفتاح النشر — عند الدفع فقط
      - name: ✅ Check deploy key presence
        if: github.event_name == 'push'
        run: |
          if [ -z "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "❌ SERVER_SSH_KEY is empty or unavailable"; exit 1
          fi
          echo "✅ SERVER_SSH_KEY is set."

      # 18) نشر التطبيق + Health Check — عند الدفع فقط
      - name: 🚀 Deploy via SSH (docker run + health check)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          ssh -tt \
            -o StrictHostKeyChecking=yes \
            -o TCPKeepAlive=yes \
            -o ServerAliveInterval=15 \
            -o ServerAliveCountMax=6 \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<'EOF'
          set -e

          IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/mlops-api:latest"

          # تسجيل الدخول إذا الصورة خاصة (تجاهل الفشل إن كانت عامة)
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin || true

          docker pull -q "$IMAGE"

          docker stop mlops-api || true
          docker rm mlops-api || true

          # تمرير متغيرات البيئة الضرورية للتوافق مع API وW&B
          docker run -d --name mlops-api \
            -p 80:8000 \
            --restart=always \
            -e WANDB_API_KEY='${{ secrets.WANDB_API_KEY }}' \
            -e WANDB_PROJECT='mlops-monitoring' \
            -e TEXT_MODEL_NAME='baseline' \
            -e IMG_MODEL_NAME='baseline' \
            "$IMAGE"

          echo "⏳ Waiting for API to start..."
          for i in {1..10}; do
            if curl -sSf http://localhost:80/health > /dev/null; then
              echo "✅ API is up and running"
              exit 0
            fi
            echo "Retrying in 3s..."
            sleep 3
          done

          echo "❌ API did not start in expected time"
          docker logs --tail=200 mlops-api || true
          exit 1
          EOF

      # 19) ملخص التنفيذ
      - name: 📜 Summary
        if: always()
        run: |
          echo "## ✅ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Docker image tag:" >> $GITHUB_STEP_SUMMARY
          echo "  * latest" >> $GITHUB_STEP_SUMMARY
          echo "  * ${{ steps.tagger.outputs.tag }}" >> $GITHUB_STEP_SUMMARY

