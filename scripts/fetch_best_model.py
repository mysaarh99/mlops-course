import wandb
import joblib
import os

# ูุฐุง ุงูุณูุฑุจุช ูููู ุจุงูุงุชุตุงู ุจููุตุฉ Weights & Biases (W&B) ุจุงุณุชุฎุฏุงู API ููุญุตูู ุนูู ุจูุงูุงุช ุชุฌุฑุจุฉ ูุนููุฉ (Sweep).

# ุฅุนุฏุงุฏ ูุชุบูุฑุงุช W&B (ูุดุฑูุนุ ููุงูุ Sweep ID)
PROJECT = "mlops_text_classification"  # ุงุณู ูุดุฑูุน W&B
ENTITY = "mysaascholar98-mlops"  # ุงุณู ุงูุญุณุงุจ ุฃู ุงููุฑูู ูู W&B
SWEEP_ID = "t39ykh89"  # ูุนุฑู ุงูู Sweep (ุชุฌุงุฑุจ ูุชุนุฏุฏุฉ ุถูู ููุณ ุงูุฅุนุฏุงุฏุงุช)

def download_best_model():
    api = wandb.Api()  # ุฅูุดุงุก ูุงุฆู API ููุชูุงุตู ูุน W&B

    # ุชูููู ุงููุณุงุฑ ุงููุงูู ููู Sweep ูู W&B (ENTITY/PROJECT/SWEEP_ID)
    sweep_path = f"{ENTITY}/{PROJECT}/{SWEEP_ID}"

    try:
        sweep = api.sweep(sweep_path)  # ุชุญููู ุจูุงูุงุช ุงูู Sweep
    except wandb.errors.CommError as e:
        # ูู ุญุงู ุญุฏูุซ ุฎุทุฃ ุจุงูุงุชุตุงู ุฃู ุนุฏู ูุฌูุฏ ุงูู Sweep
        print(f"โ ูู ูุชู ุงูุนุซูุฑ ุนูู Sweep ุจุงููุณุงุฑ: {sweep_path}")
        print(str(e))
        return  # ุฅููุงู ุงูุชูููุฐ

    runs = sweep.runs  # ุฌูุจ ูู ุงูุชุฌุงุฑุจ (Runs) ุถูู ูุฐุง ุงูู Sweep
    if not runs:
        print("โ ูุง ุชูุฌุฏ ุชุฌุงุฑุจ ุถูู ูุฐุง ุงูู Sweep")
        return  # ุฅุฐุง ูู ุชูุฌุฏ ุชุฌุงุฑุจุ ุฅููุงู ุงูุชูููุฐ

    # ุฅูุฌุงุฏ ุฃูุถู ุชุฌุฑุจุฉ ุญุณุจ ูููุฉ ุฏูุฉ ุงููููุฐุฌ (accuracy) ูู ููุฎุต ุงูุชุฌุฑุจุฉ
    best_run = max(runs, key=lambda r: r.summary.get("accuracy", 0))

    print(f"๐น ุฃูุถู ุชุฌุฑุจุฉ: {best_run.name} ุจุฏูุฉ {best_run.summary.get('accuracy'):.4f}")

    # ุงูุชุฃูุฏ ูู ูุฌูุฏ ูุฌูุฏ models ูุญูุธ ุงููููุงุช
    os.makedirs("models", exist_ok=True)

    # ุชูุฒูู ุฌููุน ุงูู Artifacts (ุงููููุงุช ุงููุงุชุฌุฉ) ูู ุฃูุถู ุชุฌุฑุจุฉ ุถูู ุงููุฌูุฏ "models"
    for artifact in best_run.logged_artifacts():
        print(f"โฌ๏ธ ุชูุฒูู Artifact: {artifact.name}")
        artifact.download(root="models")

    # ุฅุนุงุฏุฉ ุชุณููุฉ ุงููููุฐุฌ ุงูุฃูุถู ุฅูู ุงุณู ุซุงุจุช ูุชุณููู ุงูุงุณุชุฎุฏุงู ูุงุญููุง
    for file in os.listdir("models"):
        if file.endswith(".pkl") and "logistic_model" in file:
            target_path = "models/logistic_model_best.pkl"
            source_path = os.path.join("models", file)

            # ุฅุฐุง ูุงู ุงูููู ุงููุฏู ููุฌูุฏ ูุณุจููุงุ ุงุญุฐูู ูุจู ุฅุนุงุฏุฉ ุงูุชุณููุฉ
            if os.path.exists(target_path):
                os.remove(target_path)

            os.rename(source_path, target_path)  # ุฅุนุงุฏุฉ ุงูุชุณููุฉ
            print("โ ุงููููุฐุฌ ุงูุฃูุถู ูุญููุธ ุจุงุณู models/logistic_model_best.pkl")
            break  # ุฅููุงู ุงูุจุญุซ ุจุนุฏ ุฅูุฌุงุฏ ุฃูู ููู ูุทุงุจู

# ููุทุฉ ุงูุฏุฎูู ููุณูุฑุจุช
if __name__ == "__main__":
    download_best_model()
